# Implementation of all stack operations
import java.util.*;
interface Stack
{
    void push(int data);
    int pop(); 
    int peek(); 
    boolean isEmpty(); 
    void display();
}
class ArrayStack implements Stack{
    int a[],SIZE;
    int top=-1;
    public ArrayStack(int SIZE)
    {
        this.SIZE=SIZE;
        a=new int[this.SIZE];
    }
    
    # adds element only from oneside that is Last in First Out
    public void push(int data) throws ArrayIndexOutOfBoundsException
    {
        if(top!=SIZE-1)
        {
            top++;
           a[top]=data; 
        }
        else{
            throw new ArrayIndexOutOfBoundsException();
        }
    }
    
    # deletes the element at the top
    public int pop() throws ArrayIndexOutOfBoundsException
    {
        if(top!=-1)
        {
            int item=a[top];
            top--;
            return item;
        }
        else{
            throw new ArrayIndexOutOfBoundsException();
        }
    }
    
    # displays the top element
    public int peek() throws ArrayIndexOutOfBoundsException
    {
        if(top!=-1)
            return a[top];
        else
            throw new ArrayIndexOutOfBoundsException();
    }
     
    # If the array size is less than the top it throws exception 
    public void display() throws ArrayIndexOutOfBoundsException
    {
        if(top!=-1){
        for(int i=0;i<=top;i++)
        {
            System.out.print(a[i]+" ");
        }
        }
        else 
           throw new ArrayIndexOutOfBoundsException(); 
    }
    
    # checks if stack is empty
    public boolean isEmpty()
    {
        if(top==-1)
            return true;
        return false;
    }
}    

public class newStack {
    static final int SIZE = 100; # array size is fixed
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Stack stack = new ArrayStack(SIZE);
        int N = sc.nextInt();
        for (int query = 1; query <= N; query++) {
            int queryType = sc.nextInt();
            switch (queryType) {
                case 1:
                    try {
                        stack.push(sc.nextInt());
                    } catch (Exception e) {
                        System.out.println("Stack Overflow");
                    }
                    break;
                case 2:
                    try {
                        System.out.println("Popped Element: " + stack.pop());
                    } catch (Exception e) {
                        System.out.println("Stack Underflow");
                    }
                    break;
                case 3:
                    try {
                        System.out.println("Top Element: " + stack.peek());
                    } catch (Exception e) {
                        System.out.println("Stack Empty");
                    }
                    break;
                case 4:
                    try {
                        System.out.print("Stack Elements: ");
                        stack.display();
                        System.out.println();
                    } catch (Exception e) {
                        System.out.println("Stack Empty");
                    }
                    break;
                case 5:
                    if (stack.isEmpty()) {
                        System.out.println("TRUE");
                    } else {
                        System.out.println("FALSE");
                    }
            }
        }
    }
}
